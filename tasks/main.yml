---
- debug: msg="{{ inventory_hostname }}"
- debug: msg="{{ new_hostname }}"
- debug: msg="{{ vpn_ip }}"

# can also use ansible_eth0.ipv4.address for IP

- hostname: name="{{ new_hostname }}"
- lineinfile: dest=/etc/hosts regexp='^127\.0\.0\.1' line='127.0.0.1 localhost {{ new_hostname }}' owner=root group=root mode=0644

# TODO clear conf if exists?
# rm -rf /etc/tinc

- name: install tinc
  apt: >
    name=tinc
    state=present
    update_cache=yes
    cache_valid_time=3600

- name: ensure tinc vpn name directory exists
  file: >
    path=/etc/tinc/{{ vpn_name }}/hosts
    recurse=True
    state=directory

- name: ensure tinc.conf exists for vpn name
  template: >
    src=tinc.conf.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc.conf

- name: ensure tinc address is properly set in tinc host file
  lineinfile: >
    dest=/etc/tinc/{{ vpn_name }}/hosts/{{ new_hostname }}
    line="Address = {{ inventory_hostname }}"
    create=yes
  notify:
    - restart tinc

#- name: ensure subnet ip address is properly set in tinc host file
#  lineinfile: >
#    dest=/etc/tinc/{{ vpn_name }}/hosts/{{ new_hostname }}
#    line="Subnet = {{ vpn_subnet }}"
#    create=yes
#  notify:
#    - restart tinc

- name: create /etc/tinc/nets.boot file from template
  template: >
    src=nets.boot.j2
    dest=/etc/tinc/nets.boot
  notify:
    - restart tinc

- name: create tinc private key
  shell: tincd -n {{ vpn_name }} -K4096
  args:
    creates: /etc/tinc/{{ vpn_name }}/rsa_key.priv

- name: create tinc-up file
  template: >
    src=tinc-up.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc-up
    mode=0755

- name: create tinc-down file
  template: >
    src=tinc-down.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc-down
    mode=0755
  notify:
    - restart tinc

- name: fetch tinc hosts file after private key creation
  fetch: >
    src=/etc/tinc/{{ vpn_name }}/hosts/{{ new_hostname }}
    dest=fetch/{{ new_hostname }}
    flat=yes
  notify:
    - restart tinc

- name: ensure the fetched tinc hosts file are place on each server
  file: >
    src={{ item }}
    dest=/etc/tinc/{{ vpn_name }}/hosts/{{ item }}
  with_fileglob:
    - fetch/*
  notify:
    - restart tinc

# so this will unnecessarily copy the hosts file but still should be ok
- name: sync the fetched hosts files on each host
  synchronize: >
    src=fetch/
    dest=/etc/tinc/{{ vpn_name }}/hosts/
  notify:
    - restart tinc

# finally ensure tinc is actually running
- name: ensure tinc is running
  service: >
    name=tinc
    state=started

# and clean up
# TODO remove local fetch dir
